#!/usr/bin/env python3

# Commentary:

# This script is an attempt to make a consistent interface for interaction
# with branches for the most common tasks plus some extra features.

# Features:
# + History of branch switching.
# + Metadata for branches.
# + Referring to branches by ids (when using this script).
# + Consistent and convenient command-line interface for several git commands
#   and for operations on metadata.
# + Cli is complemented with dialogs for branch selection and stuff.
# + Is single file in pure python3 that can be compiled.
#   Vague testing shows a small but evident speed boost from compilation.

# NOTE: Metadata is local and lives in the project's .git dir.
# For other solutions to the branch metadata problem see
# https://stackoverflow.com/questions/2108405/branch-descriptions-in-git

# Is it good? I don't know, works for me.

from sys import argv
from enum import Enum, unique
from subprocess import run, PIPE
import csv
import readline


# AUX


def error(msg, code=1):
    print('git-b: ' + msg)
    exit(code)


def rem_end_nl(s):
    return s[:-1] if s[-1:] == '\n' else s


def cmd(*cmd_list):
    res = run(cmd_list, stdout=PIPE)
    if res.returncode != 0:
        error('\n  The command:\n      '
              + ' '.join(cmd_list)
              + '\n  exited with code:\n      '
              + str(res.returncode))
        exit(res.returncode)
    retstr = res.stdout.decode('utf-8')
    return rem_end_nl(retstr)


# COLORS


ESC = '\u001B'  # Escape character
CSI = ESC + '['  # Control Sequence Introducer


# Select Graphic Rendition


def SGR(code):
    return CSI + str(code) + 'm'


# LEXER


def integers(start=0):
    i = start - 1
    while True:
        i += 1
        yield i


@unique
class T(Enum):
    "Token types"

    __genint = integers(1)

    ID = next(__genint)
    STR = next(__genint)

    # options
    PREV = next(__genint)
    HISTORY = next(__genint)
    BRANCH = next(__genint)
    NEW = next(__genint)
    ANNOTATE = next(__genint)
    STATUS = next(__genint)
    DELETE = next(__genint)
    FORCE_DELETE = next(__genint)
    LIST = next(__genint)
    LIST_HISTORY = next(__genint)
    RAW_LIST = next(__genint)
    RAW_LIST_HISTORY = next(__genint)
    HELP = next(__genint)
    SET_ID = next(__genint)
    SHOW_DELETED = next(__genint)
    REINDEX = next(__genint)
    SHOW_CLOSED = next(__genint)


class Token:
    def __init__(self, type, lexem):
        self.type = type
        self.lexem = lexem


def option_token(arg):
    opt2tok = {
        ('-'): T.PREV,
        ('-i', '--history'): T.HISTORY,
        ('-b', '--branch'): T.BRANCH,
        ('-n', '--new'): T.NEW,
        ('-a', '--annotate'): T.ANNOTATE,
        ('-s', '--status'): T.STATUS,
        ('-d', '--delete'): T.DELETE,
        ('-D', '--force-delete'): T.FORCE_DELETE,
        ('-l', '--list'): T.LIST,
        ('-lh', '-li', '--list-history'): T.LIST_HISTORY,
        ('-rl', '--raw-list'): T.RAW_LIST,
        ('-rh', '-ri', '--raw-history'): T.RAW_LIST_HISTORY,
        ('-h', '-u', '--usage'): T.HELP,
        ('--id', '--set-id'): T.SET_ID,
        ('--show-deleted',): T.SHOW_DELETED,
        ('--reindex',): T.REINDEX,
        ('--show-closed',): T.SHOW_CLOSED
    }
    for names, tok in opt2tok.items():
        if arg in names:
            return tok
    error('Bad option: ' + arg)


def token(arg):
    if arg:
        if arg[0] == '-':
            return option_token(arg)
        if arg[0] == ':':
            return T.ID
    # it may as well be an empty string
    return T.STR


def lex(args):
    return map(lambda arg: Token(token(arg), arg), args)


# METADATA


class Branch:
    def __init__(self, branch, id, recency, annotation, status):
        self.branch = branch
        self.id = id
        self.recency = recency
        self.annotation = annotation
        self.status = status

    def cmp(self, other):
        self_status = self.status
        other_status = other.status
        if self_status == 'closed' and other_status != 'closed':
            return -1
        elif self_status != 'closed' and other_status == 'closed':
            return 1
        else:
            self_recency = int(self.recency)
            other_recency = int(other.recency)
            if self_recency < other_recency:
                return -1
            elif self_recency > other_recency:
                return 1
            else:
                self_id = int(self.id)
                other_id = int(other.id)
                if self_id < other_id:
                    return -1
                elif self_id > other_id:
                    return 1
                else:
                    raise RuntimeError(
                        'Found two identical ids on branch {} and branch {}'
                        .format(self.branch, other.branch))

    def __lt__(self, other): return self.cmp(other) < 0
    def __gt__(self, other): return self.cmp(other) > 0
    def __eq__(self, other): return self.cmp(other) == 0
    def __le__(self, other): return self.cmp(other) <= 0
    def __ge__(self, other): return self.cmp(other) >= 0
    def __ne__(self, other): return self.cmp(other) != 0


def str_integers(start=0):
    for i in integers(start):
        yield str(i)


def unique_id(ids, start=0):
    for id in str_integers(start):
        if not id in ids:
            return id


def augmented_branch_str(branch_data, this_branch):
    id = branch_data.id
    branch = branch_data.branch
    annotation = branch_data.annotation
    sgr = ''
    if branch_data.status:
        status = '[' + branch_data.status + '] '
        if branch_data.status == 'closed':
            sgr = SGR(37)
    else:
        status = ''
    if not annotation and not status:
        row = ' {:<3} {}'.format(id, branch)
    else:
        row = ' {:<3} {:<50} {:<3} {}{}'.format(
            id, branch, id, status, annotation)
    if branch == this_branch:
        sgr = SGR(32)
        row = '*' + row
    else:
        row = ' ' + row
    return sgr + row + SGR(0)


def branches():
    retstr = cmd('git', 'for-each-ref',
                 '--format="%(refname:short)"', 'refs/heads/')
    return list(map(lambda ln: ln.strip('"'), retstr.split('\n')))


def find_dot_git():
    dot_git = cmd('git', 'rev-parse', '--show-toplevel') + '/.git'
    if os.path.isdir(dot_git):
        return dot_git
    # assumption is that it is a submodule
    if not os.path.isfile(dot_git):
        raise Exception('.git is not a file, nor a dir')
    f = open(dot_git, mode='r') 
    dot_git_content = f.read()
    if dot_git_content.startswith('gitdir: '):
        return dot_git_content[len('gitdir: '):].strip('\n')
    else:
        raise Exception('Unexpected content in .git')


class Metadata:
    dot_git = find_dot_git()

    history_len = 40
    history_path = dot_git + '/git-b-history'

    path = dot_git + '/git-b-metadata'
    csv_fields_order = ['branch', 'id', 'recency', 'annotation', 'status']

    zero_id_branches = ('master', 'trunk')

    def __init__(self):
        self._initialized = False
        self._branch_list = None
        self._rewrite_scheduled = False
        self._id2data = None
        self.data = []
        self.branch2data = {}
        self.maxrecency = -1

    @property
    def branch_list(self):
        if not self._branch_list:
            self._branch_list = branches()
        return self._branch_list

    @property
    def id2data(self):
        if not self._id2data:
            self._id2data = {b.id: b for b in self.data}
        return self._id2data

    def ini(self):
        "Initialize fields and fix possible differences"
        if self._initialized:
            return self
        try:
            f = open(Metadata.path, mode='r')
        except FileNotFoundError:
            self.create_metadata().schedule_rewrite()
        else:
            self.read_metadata(f)
            f.close()
        self.check_for_difference()
        self._initialized = True
        return self

    def update(self):
        self._branch_list = branches()
        self.ini()
        self.check_for_difference()
        return self

    def create_metadata(self):
        self.maxrecency = 0
        common = {'recency': 0, 'annotation': '', 'status': ''}
        ints = integers(1)
        for branch in self.branch_list:
            if branch in Metadata.zero_id_branches:
                id = 0
            else:
                id = next(ints)
            b_data = Branch(**dict(common, id=str(id), branch=branch))
            self.data.append(b_data)
            self.branch2data[branch] = b_data
        return self

    def reindex(self):
        ints = integers(1)
        for b_data in sorted(self.data, reverse=True):
            if b_data.branch in Metadata.zero_id_branches:
                b_data.id = 0
            else:
                b_data.id = next(ints)
        return self

    def read_metadata(self, file):
        reader = csv.DictReader(file, Metadata.csv_fields_order)
        for row in reader:
            recency = int(row['recency'])
            if recency > self.maxrecency:
                self.maxrecency = recency
            row['recency'] = recency
            b_data = Branch(**row)
            self.data.append(b_data)
            self.branch2data[b_data.branch] = b_data

    def schedule_rewrite(self):
        self._rewrite_scheduled = True

    def rewrite(self):
        if self._rewrite_scheduled:
            assert self._initialized and self.data
            with open(Metadata.path, mode='w') as f:
                writer = csv.DictWriter(f, Metadata.csv_fields_order)
                for b_data in self.data:
                    writer.writerow(b_data.__dict__)

    def check_for_difference(self):
        branches_from_data = set(self.branch2data.keys())
        difference = set(self.branch_list) ^ branches_from_data
        if difference:
            self.fix_difference(difference, branches_from_data)

    def fix_difference(self, difference, branches_from_data):
        newrecency = self.maxrecency + 1
        to_delete = []
        to_add = []
        for branch in difference:
            if branch in branches_from_data:
                to_delete.append(branch)
            else:
                to_add.append(branch)
        if to_delete:
            for branch in to_delete:
                b_data = self.branch2data[branch]
                self.branch2data.pop(b_data.branch, None)
                del self.data[self.data.index(b_data)]
        if to_add:
            common = {'recency': newrecency, 'annotation': '', 'status': ''}
            ids_set = set(map(lambda d: d.id, self.data))
            for branch in to_add:
                newid = unique_id(ids_set, start=1)
                ids_set.add(newid)
                b_data = Branch(**dict(common, id=newid, branch=branch))
                self.data.append(b_data)
                self.branch2data[branch] = b_data
        self.schedule_rewrite()

    def augment(self, branches_to_augment=None, show_deleted=False, show_closed=False):
        if branches_to_augment is None:
            branches = map(lambda d: d.branch, sorted(self.data))
        else:
            branches = branches_to_augment
        this_branch = cur_branch()
        augmented_list = []
        for branch in branches:
            try:
                b_data = self.branch2data[branch]
            except KeyError:
                if show_deleted:
                    augmented_list.append('  {:<3} {}'.format('-', branch))
            else:
                if b_data.status != 'closed' or show_closed:
                    augmented_list.append(
                        augmented_branch_str(
                            b_data, this_branch))
        return augmented_list

    def menu(self, branches_to_augment=None, show_deleted=False):
        self.ini()
        print_str_list(self.augment(
            branches_to_augment, show_deleted=show_deleted))
        try:
            id = prompt('> ')
            return self.id2data[id].branch
        except KeyError:
            error('Bad id: ' + id)


# Global metadata singleton.
# Singleness is not enforced in any way,
# it's just supposed to be single
M = Metadata()


# IMPLEMENTATION


def kb_interrupt():
    print()
    exit(0)


def prompt(prompt_msg):
    try:
        return input(prompt_msg)
    except KeyboardInterrupt:
        kb_interrupt()


def history_is_empty():
    error('The history is empty')


def history():
    # TODO: (cannot imagine how it can be useful)
    # * store exit time in history
    # * store HEAD's hash when exited
    try:
        f = open(M.history_path, mode='r')
    except FileNotFoundError:
        history_is_empty()
    else:
        history_list = list(map(lambda ln: rem_end_nl(ln), f))
        f.close()
        return history_list


def cur_branch():
    return cmd('git', 'rev-parse', '--abbrev-ref', 'HEAD')


def cut_history():
    with open(M.history_path, mode='r+') as f:
        lines = list(f)
        if len(lines) > M.history_len:
            f.truncate(0)
            f.writelines(lines[-M.history_len:])


def change_branch(name, minus_b=False):
    original_branch = cur_branch()
    if minus_b:
        cmd('git', 'checkout', '-b', name)
        M.ini().schedule_rewrite()
    else:
        cmd('git', 'checkout', name)
    with open(M.history_path, mode='a') as f:
        f.write(original_branch + '\n')
    cut_history()


def print_str_list(lst):
    print('\n'.join(lst))


def delete_branch_by_name(name, option='-d'):
    delete_report = cmd('git', 'branch', option, name)
    print(delete_report)


def to_id(tok):
    return tok.lexem[1:]


def branch_by_id_tok(tok):
    i2d = M.ini().id2data
    id = to_id(tok)
    try:
        b = i2d[id]
    except KeyError:
        error('Bad id: ' + id)
    else:
        return b.branch


def bad_argument(tok):
    error('Bad argument: ' + tok.lexem)


def common_delete_branch(t, tokens, option='-d'):
    deletions = []

    def take1():
        try:
            t = next(tokens)
        except StopIteration:
            return False
        else:
            if t.type == T.STR:
                def del_fn(): return delete_branch_by_name(t.lexem, option)
            elif t.type == T.ID:
                def del_fn(): return delete_branch_by_name(branch_by_id_tok(t), option)
            else:
                bad_argument(t)
            deletions.append(del_fn)
            return True
    if not take1():
        delete_branch_by_name(M.menu(), option)
    else:
        while take1():
            pass
        for del_fn in deletions:
            del_fn()
    M.update().schedule_rewrite()


def read_1_optional_flag(tokens, tok_type):
    if tokens is None:
        return False
    try:
        t = next(tokens)
    except StopIteration:
        return False
    else:
        if t.type == tok_type:
            return True
        return False


# COMPOSITE COMMAND IMPLEMENTATION


def took_branch(t):
    if t.type == T.STR:
        return t.lexem, None
    elif t.type == T.ID:
        return branch_by_id_tok(t), None
    else:
        return True, t


def took_new_branch(t):
    if t.type == T.STR:
        return t.lexem, None
    else:
        return True, t


def took_id(t):
    if t.type == T.STR:
        try:
            return int(t.lexem), None
        except ValueError:
            error('Id should be an integer')
    else:
        return True, t


def take_next(when_taken):
    def taker_fn(tokens):
        try:
            t = next(tokens)
        except StopIteration:
            return True, None
        else:
            return when_taken(t)
    return taker_fn


def take_upto_option(tokens):
    annotation = []
    def getres(): return ' '.join(annotation) if annotation else True
    while True:
        try:
            t = next(tokens)
        except StopIteration:
            return getres(), None
        else:
            if t.type == T.STR or t.type == T.ID:
                annotation.append(t.lexem)
            else:
                return getres(), t


def parse_composite_command(t, tokens, pinfo):
    typemap = {
        T.BRANCH: ('branch', take_next(took_branch)),
        T.NEW: ('new-branch', take_next(took_new_branch)),
        T.ANNOTATE: ('annotation', take_upto_option),
        T.STATUS: ('status', take_upto_option),
        T.SET_ID: ('id', take_next(took_id))
    }
    next_t = t
    while True:
        if next_t:
            t = next_t
            next_t = None
        else:
            try:
                t = next(tokens)
            except StopIteration:
                return pinfo
        field, fn = typemap[t.type]
        value, next_t = fn(tokens)
        pinfo[field] = value


def destruct_parsing_info(pinfo):
    def get(dict, field):
        try:
            return dict[field]
        except KeyError:
            return None
    return get(pinfo, 'branch'), get(pinfo, 'new-branch'), \
        get(pinfo, 'annotation'), get(pinfo, 'status'), \
        get(pinfo, 'id')


def my_bool(arg):
    if arg == '':
        return True
    if arg == 0:
        return True
    return bool(arg)


def boolify(*args):
    return tuple(my_bool(arg) for arg in args)


# COMMANDS


def annotate(branch, annotation):
    M.ini()
    M.branch2data[branch].annotation = annotation
    M.schedule_rewrite()


def add_status(branch, status):
    M.ini()
    M.branch2data[branch].status = status
    M.schedule_rewrite()


def set_id(branch, id):
    M.ini()
    b = M.branch2data[branch]
    if int(b.id) == id:
        error('Branch ' + branch + ' already has id ' + str(id))
    str_id = str(id)
    if str_id in M.id2data.keys():
        error('There is already a branch with ' +
              str_id + ' id: ' + M.id2data[str_id].branch)
    b.id = id
    M.schedule_rewrite()


def composite_command(field, take_field):
    def fn(_, tokens):
        value, next_t = take_field(tokens)
        pinfo = parse_composite_command(next_t, tokens, {field: value})
        branch, new_branch, annotation, status, id = destruct_parsing_info(
            pinfo)

        # cut off edge cases
        if boolify(branch, new_branch) == (True, True):
            error('Mutually exclusive arguments: --branch and --new-branch')
        elif boolify(branch, annotation, status, id) == (True, False, False, False):
            change_branch(branch)
            exit(0)

        # set branch to work with
        branch_name = None
        if branch:
            if branch == True:
                branch_name = M.menu()
                print('branch> ', branch_name)
            else:
                branch_name = branch
        elif new_branch:
            if new_branch == True:
                branch_name = prompt('new branch> ')
            else:
                branch_name = new_branch
            change_branch(branch_name, minus_b=True)

        bool_annotation = my_bool(annotation)
        bool_status = my_bool(status)
        bool_id = my_bool(id)
        if (bool_annotation or bool_status or bool_id) and not branch_name:
            branch_name = M.menu()

        # add annnotation and status
        if bool_annotation:
            if annotation == True:
                annotation = prompt('annotation> ')
            annotate(branch_name, annotation)
        if bool_status:
            if status == True:
                status = prompt('status> ')
            add_status(branch_name, status)
        if bool_id:
            if id == True and id != 1:
                id = prompt('id> ')
            set_id(branch_name, id)

        if (bool_annotation or bool_status or bool_id):
            print_str_list(M.augment([branch_name]))
    return fn


def go_to_prev_branch(t, tokens):
    try:
        f = open(M.history_path, mode='r')
    except FileNotFoundError:
        history_is_empty()
    else:
        name = list(f)[-1][:-1]
        f.close()
        change_branch(name)


def go_to_branch_by_history(t, tokens):
    show_deleted = read_1_optional_flag(tokens, T.SHOW_DELETED)
    change_branch(M.menu(history(), show_deleted))


def delete_branch(t, tokens):
    common_delete_branch(t, tokens, '-d')


def force_delete_branch(t, tokens):
    common_delete_branch(t, tokens, '-D')


def print_augmented_branches(t, tokens):
    show_closed = read_1_optional_flag(tokens, T.SHOW_CLOSED)
    print_str_list(M.ini().augment(show_closed=show_closed))


def print_augmented_history(t, tokens):
    show_deleted = read_1_optional_flag(tokens, T.SHOW_DELETED)
    print_str_list(M.ini().augment(history(), show_deleted=show_deleted))


def print_raw_branch_list(t, tokens):
    print_str_list(branches())


def print_raw_history(t, tokens):
    print_str_list(history())


def reindex(t, tokens):
    M.ini().reindex().schedule_rewrite()
    print_augmented_branches(None, None)


# TODO: make a separate manpage.
# Installed manpage will also enable git-help command
def print_help(t, tokens):
    print('''NAME
      git-b — Interaction with git branches for the most common tasks

SYNOPSIS
      git-b [ <single entry statement> | <composite statement> ]

STATEMENTS
  <single entry statement>
      -
          Go to previous branch in history.
          Git: git checkout *previous branch*

      BRANCH
          Go to BRANCH. BRANCH is a BRANCH_NAME or BRANCH_ID.
          Git: git checkout BRANCH

      -d|--delete BRANCH*
          Delete one or more branches.
          Git: git branch -d BRANCH # maybe several times

      -D|--force-delete BRANCH*
          Force delete one or more branches.
          Git: git branch -D BRANCH # maybe several times

      -n|--new-branch BRANCH_NAME?
          Create new branch and go to it.
          Git: git checkout -b BRANCH_NAME'

      -a|--annotate STR*
          Add an annotation to a branch you'd choose from a menu.

      -s|--status STR*
          Add a status to a branch you'd choose from a menu.

      -l|--list
          Print branch list augmented with metadata.

      -li|-lh|--list-history
          Print history list augmented with metadata.

      -rl|--raw-list
          Print raw branch list.
          Git: git for-each-ref --format="%(refname:short)" refs/heads/

      -rh|--raw-history
          Print raw history list.

      -h|--help|-u|--usage
          Print this help message.

      --id|--set-id
          Set id of a branch

      --show-deleted
          Shows deleted branches in history. Works with --history and --list-history

  <composite statement>
       TODO
''')


# MAIN


def execute_command(args):
    tokens = lex(args)
    type2fn = {
        T.STR: composite_command('branch', lambda _: (t.lexem, None)),
        T.ID: composite_command('branch', lambda _: (branch_by_id_tok(t), None)),
        T.PREV: go_to_prev_branch,
        T.HISTORY: go_to_branch_by_history,
        T.BRANCH: composite_command('branch', take_next(took_branch)),
        T.NEW: composite_command('new-branch', take_next(took_new_branch)),
        T.ANNOTATE: composite_command('annotation', take_upto_option),
        T.STATUS: composite_command('status', take_upto_option),
        T.DELETE: delete_branch,
        T.FORCE_DELETE: force_delete_branch,
        T.LIST: print_augmented_branches,
        T.LIST_HISTORY: print_augmented_history,
        T.RAW_LIST: print_raw_branch_list,
        T.RAW_LIST_HISTORY: print_raw_history,
        T.HELP: print_help,
        T.SET_ID: composite_command('id', take_next(took_id)),
        T.SHOW_DELETED: lambda _, __: error('--show-deleted can only follow --history or --list-history options'),
        T.SHOW_CLOSED: lambda _, __: error('--show-closed can only follow --list option'),
        T.REINDEX: reindex
    }
    try:
        t = next(tokens)
        command_fn = type2fn[t.type]
    except KeyError:
        bad_argument(t)
    else:
        command_fn(t, tokens)


def git_b(args):
    if not args:
        change_branch(M.menu())
        exit(0)
    execute_command(args)
    M.rewrite()


if __name__ == '__main__':
    git_b(argv[1:])
